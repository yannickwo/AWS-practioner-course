AWSTemplateFormatVersion: 2010-09-09
Description: >-
   AWS CloudFormation Sample Template WordPress_Single_Instance: WordPress is web
   software you can use to create a beautiful website or blog. This template
   installs WordPress with a local MySQL database for storage. It demonstrates
   using the AWS CloudFormation bootstrap scripts to deploy WordPress.
   **WARNING** This template creates an Amazon EC2 instance. You will be billed
   for the AWS resources used if you create a stack from this template.
   Modified Feb 2020 to build unrestricted on Linux2, plus add automation to select the AMI instead of using mapping.
Parameters:
   KeyName:
      Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
      Type: 'AWS::EC2::KeyPair::KeyName'
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
   InstanceType:
      Description: WebServer EC2 instance type
      Type: String
      Default: t2.micro
      AllowedValues:
         - t1.micro
         - t2.micro
         - t2.small
         - t2.medium
         - t2.large
         - t3.micro
         - t3.small
         - t3.medium
         - t3.large
         - m4.large
         - g2.2xlarge
         # - g3.4xlarge
      ConstraintDescription: must be a valid EC2 instance type.

   SSHLocation:
      Description: The IP address range that can be used to SSH to the EC2 instances
      Type: String
      MinLength: '9'
      MaxLength: '18'
      Default: 0.0.0.0/0
      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
   DBName:
      Default: wordpressdb
      Description: The WordPress database name
      Type: String
      MinLength: '1'
      MaxLength: '64'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9\-]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
   DBUser:
      NoEcho: 'true'
      Description: The WordPress database admin account username
      Type: String
      MinLength: '1'
      MaxLength: '16'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9\-]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
   DBPassword:
      NoEcho: 'true'
      Description: The WordPress database admin account password
      Type: String
      MinLength: '8'
      MaxLength: '41'
      AllowedPattern: '[a-zA-Z0-9\-]*'
      ConstraintDescription: must contain only alphanumeric characters.
   DBRootPassword:
      NoEcho: 'true'
      Description: MySQL root password
      Type: String
      MinLength: '8'
      MaxLength: '41'
      AllowedPattern: '[a-zA-Z0-99\-]*'
      ConstraintDescription: must contain only alphanumeric characters.
Mappings:
   AWSInstanceType2Arch:
      t1.micro:
         Arch: HVM64
         # Arch: PV64  need to sort out Linux2 on PV
      t2.nano:
         Arch: HVM64
      t2.micro:
         Arch: HVM64
      t2.small:
         Arch: HVM64
      t2.medium:
         Arch: HVM64
      t2.large:
         Arch: HVM64
      t3.micro:
         Arch: HVM64
      t3.small:
         Arch: HVM64
      t3.medium:
         Arch: HVM64
      t3.large:
         Arch: HVM64
      m1.small:
         Arch: HVM64
      m1.medium:
         Arch: HVM64
      m1.large:
         Arch: HVM64
      m1.xlarge:
         Arch: HVM64
      m2.xlarge:
         Arch: HVM64
      m2.2xlarge:
         Arch: HVM64
      m2.4xlarge:
         Arch: HVM64
      m3.medium:
         Arch: HVM64
      m3.large:
         Arch: HVM64
      m3.xlarge:
         Arch: HVM64
      m3.2xlarge:
         Arch: HVM64
      m4.large:
         Arch: HVM64
      m4.xlarge:
         Arch: HVM64
      m4.2xlarge:
         Arch: HVM64
      m4.4xlarge:
         Arch: HVM64
      m4.10xlarge:
         Arch: HVM64
      c1.medium:
         Arch: HVM64
      c1.xlarge:
         Arch: HVM64
      c3.large:
         Arch: HVM64
      c3.xlarge:
         Arch: HVM64
      c3.2xlarge:
         Arch: HVM64
      c3.4xlarge:
         Arch: HVM64
      c3.8xlarge:
         Arch: HVM64
      c4.large:
         Arch: HVM64
      c4.xlarge:
         Arch: HVM64
      c4.2xlarge:
         Arch: HVM64
      c4.4xlarge:
         Arch: HVM64
      c4.8xlarge:
         Arch: HVM64
      g2.2xlarge:
         Arch: HVMG2
      g2.8xlarge:
         Arch: HVMG2
      g3.4xlarge:
         Arch: HVM64
      r3.large:
         Arch: HVM64
      r3.xlarge:
         Arch: HVM64
      r3.2xlarge:
         Arch: HVM64
      r3.4xlarge:
         Arch: HVM64
      r3.8xlarge:
         Arch: HVM64
      i2.xlarge:
         Arch: HVM64
      i2.2xlarge:
         Arch: HVM64
      i2.4xlarge:
         Arch: HVM64
      i2.8xlarge:
         Arch: HVM64
      d2.xlarge:
         Arch: HVM64
      d2.2xlarge:
         Arch: HVM64
      d2.4xlarge:
         Arch: HVM64
      d2.8xlarge:
         Arch: HVM64
      hi1.4xlarge:
         Arch: HVM64
      hs1.8xlarge:
         Arch: HVM64
      cr1.8xlarge:
         Arch: HVM64
      cc2.8xlarge:
         Arch: HVM64

Resources:
   AMIInfo:
      Type: Custom::AMIInfo
      Properties:
         ServiceToken:
            Fn::GetAtt:
               - AMIInfoFunction
               - Arn
         Region:
            Ref: AWS::Region
         Architecture:
            Fn::FindInMap:
               - AWSInstanceType2Arch
               - Ref: InstanceType
               - Arch
            # try mapping just on the type and not on the size. !Select [0, !Split [",", Ref: InstanceTyp]]
   AMIInfoFunction:
      Type: AWS::Lambda::Function
      Properties:
         Code:
            ZipFile: |
               /**
               * A sample Lambda function that looks up the latest AMI ID for a given region and architecture.
               **/
               // Map instance architectures to an AMI name pattern
               var archToAMINamePattern = {
                   "PV64":  "amzn-ami-pv*x86_64-ebs",
                   "HVM64": "amzn2-ami-hvm-2.0.*x86_64-gp2",
                   "HVMG2": "amzn2-ami-graphics-hvm*x86_64-gp2*"
               //    "HVMG3": "amzn2-ami-graphics-hvm*x86_64-gp2*"
               };
               var aws = require("aws-sdk");
               exports.handler = function(event, context) {
                   console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));

                   // For Delete requests, immediately send a SUCCESS response.
                   if (event.RequestType == "Delete") {
                       sendResponse(event, context, "SUCCESS");
                       return;
                   }
                   var responseStatus = "FAILED";
                   var responseData = {};
                   var ec2 = new aws.EC2({region: event.ResourceProperties.Region});
                   var describeImagesParams = {
                       Filters: [{ Name: "name", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],
                       Owners: [event.ResourceProperties.Architecture == "HVMG2" ? "679593333241" : "amazon"]
                   };
                   // Get AMI IDs with the specified name pattern and owner
                   ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {
                       if (err) {
                           responseData = {Error: "DescribeImages call failed"};
                           console.log(responseData.Error + ":\n", err);
                       }
                       else {
                           var images = describeImagesResult.Images;
                           // Sort images by name in descending order. The names contain the AMI version, formatted as YYYY.MM.Ver.
                           images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });
                           for (var j = 0; j < images.length; j++) {
                               if (isBeta(images[j].Name)) continue;
                               responseStatus = "SUCCESS";
                               responseData["Id"] = images[j].ImageId;
                               break;
                           }
                       }
                       sendResponse(event, context, responseStatus, responseData);
                   });
               };
               // Check if the image is a beta or rc image. The Lambda function won't return any of those images.
               function isBeta(imageName) {
                   return imageName.toLowerCase().indexOf("beta") > -1 || imageName.toLowerCase().indexOf(".rc") > -1;
               }
               // Send response to the pre-signed S3 URL
               function sendResponse(event, context, responseStatus, responseData) {
                   var responseBody = JSON.stringify({
                       Status: responseStatus,
                       Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                       PhysicalResourceId: context.logStreamName,
                       StackId: event.StackId,
                       RequestId: event.RequestId,
                       LogicalResourceId: event.LogicalResourceId,
                       Data: responseData
                   });
                   console.log("RESPONSE BODY:\n", responseBody);
                   var https = require("https");
                   var url = require("url");
                   var parsedUrl = url.parse(event.ResponseURL);
                   var options = {
                       hostname: parsedUrl.hostname,
                       port: 443,
                       path: parsedUrl.path,
                       method: "PUT",
                       headers: {
                           "content-type": "",
                           "content-length": responseBody.length
                       }
                   };
                   console.log("SENDING RESPONSE...\n");
                   var request = https.request(options, function(response) {
                       console.log("STATUS: " + response.statusCode);
                       console.log("HEADERS: " + JSON.stringify(response.headers));
                       // Tell AWS Lambda that the function execution is done
                       context.done();
                   });
                   request.on("error", function(error) {
                       console.log("sendResponse Error:" + error);
                       // Tell AWS Lambda that the function execution is done
                       context.done();
                   });
                   // write data to request body
                   request.write(responseBody);
                   request.end();
               }
         Handler:
            index.handler
         Role:
            Fn::GetAtt:
               - LambdaExecutionRole
               - Arn
         Runtime: nodejs10.x
         Timeout: '30'
   LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -  Effect: Allow
                  Principal:
                     Service:
                        - lambda.amazonaws.com
                  Action:
                     - sts:AssumeRole
         Path: "/"
         Policies:
            -  PolicyName: root
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -  Effect: Allow
                        Action:
                           - logs:CreateLogGroup
                           - logs:CreateLogStream
                           - logs:PutLogEvents
                        Resource: arn:aws:logs:*:*:*
                     -  Effect: Allow
                        Action:
                           - ec2:DescribeImages
                        Resource: "*"

   WebServerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: >-
            Enable HTTP access via port 80 locked down to the load-balancer + SSH
            access
         SecurityGroupIngress:
            -  IpProtocol: tcp
               FromPort: '80'
               ToPort: '80'
               CidrIp: 0.0.0.0/0
            -  IpProtocol: tcp
               FromPort: '22'
               ToPort: '22'
               CidrIp: !Ref SSHLocation
   WebServer:
      Type: 'AWS::EC2::Instance'
      Metadata:
         'AWS::CloudFormation::Init':
            configSets:
               wordpress_install:
                  - install_cfn
                  - install_wordpress
                  - configure_wordpress
            install_cfn:
               files:
                  /etc/cfn/cfn-hup.conf:
                     content: !Join
                        - ''
                        -  - |
                              [main]
                           - stack=
                           - !Ref 'AWS::StackId'
                           - |+

                           - region=
                           - !Ref 'AWS::Region'
                           - |+

                     mode: '000400'
                     owner: root
                     group: root
                  /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                     content: !Join
                        - ''
                        -  - |
                              [cfn-auto-reloader-hook]
                           - |
                              triggers=post.update
                           - |
                              path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                           - 'action=/opt/aws/bin/cfn-init -v '
                           - '         --stack '
                           - !Ref 'AWS::StackName'
                           - '         --resource WebServer '
                           - '         --configsets wordpress_install '
                           - '         --region '
                           - !Ref 'AWS::Region'
                           - |+

                     mode: '000400'
                     owner: root
                     group: root
               services:
                  sysvinit:
                     cfn-hup:
                        enabled: 'true'
                        ensureRunning: 'true'
                        files:
                           - /etc/cfn/cfn-hup.conf
                           - /etc/cfn/hooks.d/cfn-auto-reloader.conf
            install_wordpress:
               packages:
                  yum:
                     php: []
                     php-mysqlnd: []
                     mysql-community-server: []
                     mysql-community-devel: []
                     mysql-community-client: []
                     mysql-community-libs: []
                     httpd: []
               sources:
                  /var/www/html: 'http://wordpress.org/latest.tar.gz'
               files:
                  /tmp/setup.mysql:
                     content: !Join
                        - ''
                        -  - 'CREATE DATABASE '
                           - !Ref DBName
                           - |
                              ;
                           - CREATE USER '
                           - !Ref DBUser
                           - '''@''localhost'' IDENTIFIED BY '''
                           - !Ref DBPassword
                           - |
                              ';
                           - 'GRANT ALL ON '
                           - !Ref DBName
                           - .* TO '
                           - !Ref DBUser
                           - |
                              '@'localhost';
                           - |
                              FLUSH PRIVILEGES;
                     mode: '000400'
                     owner: root
                     group: root
                  /tmp/create-wp-config:
                     content: !Join
                        - ''
                        -  - |
                              #!/bin/bash -xe
                           - >
                              cp /var/www/html/wordpress/wp-config-sample.php
                              /var/www/html/wordpress/wp-config.php
                           - sed -i "s/'database_name_here'/'
                           - !Ref DBName
                           - |
                              '/g" wp-config.php
                           - sed -i "s/'username_here'/'
                           - !Ref DBUser
                           - |
                              '/g" wp-config.php
                           - sed -i "s/'password_here'/'
                           - !Ref DBPassword
                           - |
                              '/g" wp-config.php
                     mode: '000500'
                     owner: root
                     group: root
               services:
                  sysvinit:
                     httpd:
                        enabled: 'true'
                        ensureRunning: 'true'
                     mysqld:
                        enabled: 'true'
                        ensureRunning: 'true'
            configure_wordpress:
               commands:
                  01_set_mysql_root_password:
                     command: !Join
                        - ''
                        -  - mysqladmin -u root password '
                           - !Ref DBRootPassword
                           - ''''
                     test: !Join
                        - ''
                        -  - '$(mysql '
                           - !Ref DBName
                           - ' -u root --password='''
                           - !Ref DBRootPassword
                           - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
                  02_create_database:
                     command: !Join
                        - ''
                        -  - mysql -u root --password='
                           - !Ref DBRootPassword
                           - ''' < /tmp/setup.mysql'
                     test: !Join
                        - ''
                        -  - '$(mysql '
                           - !Ref DBName
                           - ' -u root --password='''
                           - !Ref DBRootPassword
                           - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
                  03_configure_wordpress:
                     command: /tmp/create-wp-config
                     cwd: /var/www/html/wordpress
                  04_configure_wordpress:
                     command: chown -R apache /var/www/html/wordpress/wp-content
                  05_configure_wordpress:
                     command: sudo systemctl stop httpd
                  06_configure_wordpress:
                     command: sudo echo "in configure_wordpress" >> /var/www/html/progress.txt
                  11_configure_wordpress:
                     command: chkconfig httpd on
                  12_configure_wordpress:
                     command:  sudo systemctl start httpd
                  13_configure_wordpress:
                     command:  sudo systemctl enable httpd

      Properties:
         Tags:
            -  Key: Name
               Value: !Ref 'AWS::StackName'
         ImageId:
            Fn::GetAtt:
               - AMIInfo
               - Id

         InstanceType: !Ref InstanceType
         SecurityGroups:
            - !Ref WebServerSecurityGroup
         KeyName: !Ref KeyName
         UserData: !Base64
            'Fn::Join':
               - ''
               -  - |
                     #!/bin/bash -xe
                  - |

                  - |
                     wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
                  - |

                  - |
                     rpm -ivh mysql-community-release-el7-5.noarch.rpm
                  - |

                  - |
                     yum update -y
                  - |

                  - |
                     yum install httpd -y
                  - |

                  - |
                     yum install -y amazon-linux-extras
                  - |+

                  - |
                     yum install -y aws-cfn-bootstrap
                  - |+

                  - |
                     echo "in UseData before - amazon-linux-extras enable php7.3" >> /var/www/html/progress.txt
                  - |+

                  - |
                     amazon-linux-extras enable php7.3
                  - |

                  - |
                     yum clean metadata
                  - |+

                  - |
                     echo "in UseData before - /opt/aws/bin/cfn-init -v" >> /var/www/html/progress.txt
                  - |+

                  - '/opt/aws/bin/cfn-init -v '
                  - '  --stack '
                  - !Ref 'AWS::StackName'
                  - '  --resource WebServer '
                  - '  --configsets wordpress_install '
                  - '  --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |+
                     echo "in UseData before - /opt/aws/bin/cfn-signal -e " >> /var/www/html/progress.txt
                  - |+

                  - '/opt/aws/bin/cfn-signal -e $? '
                  - '   --stack '
                  - !Ref 'AWS::StackName'
                  - '   --resource WebServer '
                  - '   --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |+
                     echo "in UseData after - /opt/aws/bin/cfn-signal -e" >> /var/www/html/progress.txt
                  - |+


      CreationPolicy:
         ResourceSignal:
            Timeout: PT15M
Outputs:
   WebsiteURL:
      Value: !Join
         - ''
         -  - 'http://'
            - !GetAtt
               - WebServer
               - PublicDnsName
            - /wordpress
      Description: WordPress Website

   AmiIDused:
      Description: The Amazon EC2 instance AMI ID.
      Value:
         Fn::GetAtt:
            - AMIInfo
            - Id

   MyTypePrefix:
      Description: Type without size.
      Value:
         Fn::Select:
            - 0
            - Fn::Split:
               - "."
               - "Ref": "InstanceType"
